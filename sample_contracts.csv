contract,label
"contract Test {
    uint256 public data;
    function updateData(uint256 _data) public {
        data = _data * 2; // Logical error: incorrect data update logic
    }
}",0
"contract Test {
    uint256 public data;
    function updateData(uint256 _data) public {
        data = _data; // Correct logic
    }
}",2
"contract Test {
    uint256 public data;
    function updateData(uint256 _data) public {
        if (_data > 100) {
            data = _data; // Logical error: improper validation
        }
    }
}",0
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        dataArray[index] = value; // Buffer overflow: no bounds checking
    }
}",1
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        require(index < 5, 'Index out of bounds');
        dataArray[index] = value; // Correct logic with bounds checking
    }
}",2
"contract Test {
    function multiply(uint256 a, uint256 b) public pure returns (uint256) {
        return a * b; // Logical error: potential overflow
    }
}",0
"contract Test {
    function multiply(uint256 a, uint256 b) public pure returns (uint256) {
        require(b == 0 || a <= type(uint256).max / b, 'Multiplication overflow');
        return a * b; // Correct logic
    }
}",2
"contract Test {
    function deposit(uint256 amount) public {
        msg.sender.call.value(amount)(); // Logical error: reentrancy vulnerability
    }
}",0
"contract Test {
    function deposit(uint256 amount) public {
        (bool success, ) = msg.sender.call.value(amount)("");
        require(success, 'Transfer failed'); // Correct logic with reentrancy protection
    }
}",2
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        if (index >= 5) {
            dataArray[0] = value; // Logical error: incorrect index handling
        } else {
            dataArray[index] = value; // Correct logic
        }
    }
}",0
"contract Test {
    uint256 public data;
    function updateData(uint256 _data) public {
        data = _data * 2; // Logical error: incorrect data update logic
    }
}",0
"contract Test {
    uint256 public balance;
    function deposit() public payable {
        balance = msg.value; // Logical error: incorrect balance update
    }
}",0
"contract Test {
    uint256 public data;
    function updateData(uint256 _data) public {
        if (_data > 100) {
            data = _data; // Logical error: improper validation
        }
    }
}",0
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        dataArray[index] = value; // Buffer overflow: no bounds checking
    }
}",1
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        require(index < 5, 'Index out of bounds');
        dataArray[index] = value; // Correct logic with bounds checking
    }
}",2
"contract Test {
    function multiply(uint256 a, uint256 b) public pure returns (uint256) {
        return a * b; // Logical error: potential overflow
    }
}",0
"contract Test {
    function multiply(uint256 a, uint256 b) public pure returns (uint256) {
        require(b == 0 || a <= type(uint256).max / b, 'Multiplication overflow');
        return a * b; // Correct logic
    }
}",2
"contract Test {
    function deposit(uint256 amount) public {
        msg.sender.call.value(amount)(); // Logical error: reentrancy vulnerability
    }
}",0
"contract Test {
    function deposit(uint256 amount) public {
        (bool success, ) = msg.sender.call.value(amount)("");
        require(success, 'Transfer failed'); // Correct logic with reentrancy protection
    }
}",2
"contract Test {
    uint256[5] public dataArray;
    function updateArray(uint256 index, uint256 value) public {
        if (index >= 5) {
            dataArray[0] = value; // Logical error: incorrect index handling
        } else {
            dataArray[index] = value; // Correct logic
        }
    }
}",0
"contract Test {
    uint256 public count;
    function increment(uint256 amount) public {
        count += amount; // Correct logic for increment
    }
}",2
"contract Test {
    uint256 public totalSupply;
    function mint(uint256 amount) public {
        totalSupply += amount; // Logical error: incorrect total supply increase
    }
}",0
"contract Test {
    uint256 public balance;
    function withdraw(uint256 amount) public {
        balance -= amount; // Logical error: incorrect balance subtraction
    }
}",0
"contract Test {
    uint256 public value;
    function setValue(uint256 _value) public {
        value = _value * 2; // Logical error: incorrect multiplication
    }
}",0